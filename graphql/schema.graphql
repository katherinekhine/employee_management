type Employee {
    id: ID!
    name: String!
    email: String!
    phone: String!
    postiton: String!
    created_at: DateTime!
    updated_at: DateTime!
}

# type Query {
#     employees: [Employee!] @all
#     employee(id: ID! @eq): Employee @find
# }

type Query {
    employees: [Employee!]
        @paginate(
            resolver: "App\\GraphQL\\Resolvers\\EmployeeResolver@resolveEmployees"
        )
    employee(id: ID! @eq): Employee
        @field(
            resolver: "App\\GraphQL\\Resolvers\\EmployeeResolver@resolveEmployee"
        )
}

# type Mutation {
#     createEmployee(
#         name: String!
#         email: String!
#         phone: String!
#         postiton: String!
#     ): Employee! @create
#     updateEmployee(
#         id: ID!
#         name: String
#         email: String
#         phone: String
#         postiton: String
#     ): Employee! @update
#     deleteEmployee(id: ID! @eq): Employee @delete
# }

type Mutation {
    createEmployee(
        name: String!
        email: String!
        phone: String!
        postiton: String!
    ): Employee!
        @field(
            resolver: "App\\GraphQL\\Resolvers\\EmployeeResolver@createEmployee"
        )

    updateEmployee(
        id: ID!
        name: String
        email: String
        phone: String
        postiton: String
    ): Employee!
        @field(
            resolver: "App\\GraphQL\\Resolvers\\EmployeeResolver@updateEmployee"
        )

    deleteEmployee(id: ID! @eq): Employee
        @field(
            resolver: "App\\GraphQL\\Resolvers\\EmployeeResolver@deleteEmployee"
        )
}
